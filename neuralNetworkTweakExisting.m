function [r, net, trainResultStats] = neuralNetworkTweakExisting(net, inputData, outputData)

% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 23-Oct-2018 18:36:27
%
% This script assumes these variables are defined:
%
%   eegInput - input data.
%   restNetworkTimecourse - target data.

tic;
doPlot = false;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.


% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot

net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network
[net,trainResultStats] = train(net,inputData,outputData);

% Test the Network
predictedOutput = net(inputData);

x = outputData(:, trainResultStats.trainInd);
y = predictedOutput(:, trainResultStats.trainInd);
x = x(:)';
y = y(:)';
[r.training] = regression(x, y);

x = outputData(:, trainResultStats.testInd);
y = predictedOutput(:, trainResultStats.testInd);
x = x(:)';
y = y(:)';
%[r, m, b] = regression(x, y);
[r.test] = regression(x, y);

x = outputData(:, trainResultStats.valInd);
y = predictedOutput(:, trainResultStats.valInd);
x = x(:)';
y = y(:)';
[r.validation] = regression(x, y);

if(false)
    predictionError = gsubtract(outputData,predictedOutput);
    performance = perform(net,outputData,predictedOutput)
    
    % Recalculate Training, Validation and Test Performance
    trainTargets = outputData .* trainResultStats.trainMask{1};
    valTargets = outputData .* trainResultStats.valMask{1};
    testTargets = outputData .* trainResultStats.testMask{1};
    trainPerformance = perform(net,trainTargets,predictedOutput)
    valPerformance = perform(net,valTargets,predictedOutput)
    testPerformance = perform(net,testTargets,predictedOutput)
end


% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(outputData,predictedOutput)
%figure, plotfit(net,x,t)

if(doPlot)
    plotParams = load('C:\Users\Neuro\Documents\MATLAB\resources\plotRegressionParameters.mat');
    argin = plotParams.varargin;
    figure;
    plotregression(argin{:});
end

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
r.secondsToCompute = toc;
nntraintool('close')
